#!/bin/bash

setfont cyr-sun16 2>/dev/null

# === Переменные ===
# Файловая система (ext4 или btrfs)
FILESYSTEM=""
# Часовой пояс
TIMEZONE=""
# Имя пользователя
USERNAME=""
# Пароль пользователя
USER_PASSWORD=""
# Имя хоста
HOSTNAME=""
# Диск для установки
DISK=""
# Размер раздела EFI
EFI_PARTITION_SIZE="512M"
# Размер корневого раздела (оставшееся место)
ROOT_PARTITION_SIZE="100%"
BTRFS_OPTIONS="rw,noatime,compress=zstd:2,ssd,space_cache=v2,discard=async"
EXT4_OPTIONS="noatime,discard,defaults"

=Функции=

# Функция для вывода многострочного текста по центру с цветом
print_center() {
  local text="$1"
  local term_width=$(tput cols)

  # Разделяем текст на строки
  while IFS= read -r line; do
    # Удаляем лишние пробелы в начале и конце строки
    line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

    # Вычисляем отступы для центрирования
    padding=$(( (term_width - ${#line}) / 2 ))

    # Выводим строку с цветом
    printf "%${padding}s\033[1;36m%s\033[0m\n" "" "$line"
  done <<< "$text"

  # Добавляем две пустые строки
  echo
  echo
}

# Функция для вывода сообщения об ошибке и завершения скрипта
error_handler() {
  echo -e "\n\033[1;31mОшибка: $1\033[0m"
  exit 1
}

# Функция для скрытия вывода команды
run_silent() {
  "$@" > /dev/null 2>&1
}

# Функция для проверки, является ли команда успешной
check_command() {
  local command="$1"
  local error_message="$2"

  # Выполняем команду с помощью run_silent
  run_silent /bin/bash -c "$command"

  if [ $? -ne 0 ]; then
    error_handler "$error_message"
  fi
}

# Проверка необходимых разделов
check_partitions() {

    if [[ ! -b "{$EFI}" ]]; then
    error_handler "Раздел EFI $EFI не найден"
    fi

    if [[ ! -b "{$ROOT}" ]]; then
     error_handler "Раздел ROOT $ROOT не найден"1
    fi
}

mount_efi() {
if [ -d /sys/firmware/efi/ ]; then
  # Проверяем, отформатирован ли раздел EFI
  if ! blkid | grep -q "$EFI: UUID="; then
   #echo "Форматирование раздела EFI ($EFI_PART) в FAT32"
    check_command "mkfs.vfat -F32 $EFI" "Не удалось отформатировать раздел EFI"
 else
   print_center "Раздел EFI ($EFI) уже отформатирован"
  fi
fi

# Монтирование раздела EFI
if [ -d /sys/firmware/efi/ ]; then
  mkdir -p /mnt/boot/efi
  check_command "mount $EFI /mnt/boot/efi" "Не удалось смонтировать раздел EFI"
fi
}

mount_partitions() {
    local ROOT=$1
    local HOME=${2:-}
    local FILESYSTEM=$3
    local FILESYSTEM_HOME=${4:-}

    # Монтируем корневой раздел
    if [ "$FILESYSTEM" = "btrfs" ]; then
        echo "Форматируем корневой раздел $ROOT как Btrfs"
check_command "mkfs.btrfs -f "/dev/$ROOT"" "Не удалось отформатировать раздел ROOT"
check_command "mount "/dev/$ROOT" /mnt" "Не удалось смонтировать раздел ROOT"

        echo "Создаем обязательные подтома Btrfs"
        btrfs subvolume create /mnt/@
        btrfs subvolume create /mnt/@snapshots
        btrfs subvolume create /mnt/@var
        btrfs subvolume create /mnt/@log
        btrfs subvolume create /mnt/@cache

        # Создаем @home ТОЛЬКО если нет отдельного раздела HOME
        if [ -z "$HOME" ]; then
            echo "Создаем подтом @home (отдельный HOME раздел не указан)"
            btrfs subvolume create /mnt/@home
        fi

        umount /mnt

        echo "Монтируем подтома Btrfs"
check_command "mount -o $BTRFS_OPTIONS,subvol=@ "/dev/$ROOT" /mnt"  "Не удалось смонтировать подтом @"
        mkdir -p /mnt/{var,var/cache,.snapshots,var/log}

check_command "mount -o $BTRFS_OPTIONS,subvol=@snapshots "/dev/$ROOT" /mnt/.snapshots" "Не удалось смонтировать подтом @snapshots"
check_command "mount -o $BTRFS_OPTIONS,subvol=@var "/dev/$ROOT" /mnt/var"  "Не удалось смонтировать подтом @var"
check_command "mount -o $BTRFS_OPTIONS,subvol=@var "/dev/$ROOT" /mnt/var/log" "Не удалось смонтировать подтом @log"
check_command "mount -o $BTRFS_OPTIONS,subvol=@cache "/dev/$ROOT" /mnt/var/cache" "Не удалось смонтировать подтом @cache"

        # Монтируем @home ТОЛЬКО если нет отдельного раздела HOME
        if [ -z "$HOME" ]; then
  check_command "mount -o $BTRFS_OPTIONS,subvol=@home "/dev/$ROOT" /mnt/home"  "Не удалось смонтировать подтом @home"
        fi
    else
        echo "Форматируем корневой раздел $ROOT как ext4"
check_command "mkfs.ext4 -F "/dev/$ROOT"" "Не удалось отформатировать раздел ROOT"
check_command "mount -o $EXT4_OPTIONS "/dev/$ROOT" /mnt" "Не удалось смонтировать раздел ROOT"
    fi

    # Обрабатываем домашний раздел (ЕСЛИ ОН УКАЗАН)
    if [ -n "$HOME" ]; then
        echo "Настройка домашнего раздела $HOME"
        mkdir -p /mnt/home

        if [ "$FILESYSTEM_HOME" = "btrfs" ]; then
            echo "Форматируем как Btrfs с подтомом @home"
check_command "mkfs.btrfs -f "/dev/$HOME"" "Не удалось отформатировать раздел HOME"
check_command "mount "/dev/$HOME" /mnt/home" "Не удалось смонтировать раздел HOME"
            btrfs subvolume create /mnt/home/@home
            umount /mnt/home
check_command "mount -o $BTRFS_OPTIONS,subvol=@home "/dev/$HOME" /mnt/home" "Не удалось смонтировать подтом @home"
        else
            echo "Форматируем как ext4"
check_command "mkfs.ext4 -F "/dev/$HOME"" "Не удалось отформатировать раздел HOME"
check_command "mount -o $EXT4_OPTIONS "/dev/$HOME" /mnt/home" "Не удалось смонтировать раздел HOME"
        fi
    fi

}

filesystem_root() {
print_center "=== ВЫБОР ФАЙЛОВОЙ СИСТЕМЫ ==="

while true; do
  print_center "Выберите файловую систему (ext4 или btrfs):"
  read FILESYSTEM
  case $FILESYSTEM in
    ext4|btrfs)
      break
      ;;
    *)
      print_center "Неверный выбор. Пожалуйста, выберите ext4 или btrfs."
      ;;
  esac
done
}

# Ручная разметка (cfdisk)
manual_partition() {

print_center "=== Ручная разметка ==="
print_center "Рекомендации:"
print_center "Создайте GPT таблицу разделов"
print_center "BOOT раздел: тип - EFI System (~512MiB)"
print_center "SWAP раздел: тип - Linux swap (по желанию)"
print_center "HOME раздел: тип - Linux filesystem (по желанию)"
print_center "ROOT раздел: тип - Linux filesystem (Не менее 20 гб)"
sleep 10
cfdisk "$DISK"

print_center "Созданные разделы"

lsblk -f $DISK

print_center "Введите разделы которые вы создали (например sda1 или nvme0n1p1)"

print_center "Введите загрузочный раздел(EFI System (~512MiB)): "
read -p "" EFI

print_center "Введите корневой раздел: "
read -p "" ROOT

print_center "Домашний раздел (оставьте пустым, если нет): "
read -p "" HOME

print_center "Раздел подкачки (оставьте пустым, если нет): "
read -p "" SWAP

check_partitions
filesystem_root

if [ ! -e "$HOME" ]; then

print_center "Выбери файловую систему для домашнего раздела"

while true; do
  print_center "Выберите файловую систему (ext4 или btrfs):"
  read FILESYSTEM_HOME
  case $FILESYSTEM_HOME in
    ext4|btrfs)
      break
      ;;
    *)
      print_center "Неверный выбор. Пожалуйста, выберите ext4 или btrfs."
      ;;
  esac
done

mount_partitions
mount_efi

if [ -n "SWAP" ]; then
check_command "mkswap "/dev/$SWAP""
check_command "swapon "/dev/$SWAP""
fi
}

auto_partition() {

filesystem_root

  # === Разметка диска ===

# Создание разделов с помощью parted
#check_command "parted -s $DISK mklabel gpt" "Не удалось создать таблицу разделов"
#check_command "parted -s $DISK mkpart primary fat32 1MiB ${EFI_PARTITION_SIZE}" "Не удалось создать раздел EFI"
#check_command "parted -s $DISK set 1 esp on" "Не удалось установить флаг boot на раздел EFI"
#check_command "parted -s $DISK mkpart primary ext4 ${EFI_PARTITION_SIZE} 100%" "Не удалось создать корневой раздел"

 # Разметка через parted
check_command "parted -s "$DISK" mklabel gpt" "Не удалось создать таблицу разделов"
check_command "parted -s "$DISK" mkpart "EFI" fat32 1MiB 513MiB" "Не удалось создать раздел EFI"
check_command "parted -s "$DISK" set 1 esp on" "Не удалось установить флаг boot на раздел EFI"
check_command "parted -s "$DISK" mkpart "ROOT" ext4 513MiB 100%" "Не удалось создать корневой раздел"

# === Определение разделов ===
if [[ $DISK =~ "nvme" ]]; then
    EFI="${DISK}p1"
    ROOT="${DISK}p2"
else
    EFI="${DISK}1"
    ROOT="${DISK}2"
fi

check_partitions
mount_partitions
mount_efi
}

# Функция выбора таймзоны
select_timezone() {
  print_center "=== ВЫБОР ЧАСОВОГО ПОЯСА ==="

  print_center "Выберите регион:"

  PS3="> "

  # Получаем список всех регионов
  REGIONS=($(timedatectl list-timezones | awk -F'/' '{print $1}' | sort -u | grep -v '^$' | tr -d '\r'))

  select REGION in "${REGIONS[@]}"; do
    [[ -n $REGION ]] && break
  done

  print_center "Выберите город:"

  # Получаем список всех городов для выбранного региона
  CITIES=($(timedatectl list-timezones | grep "^$REGION/" | awk -F'/' '{print $2}' | sort -u | grep -v '^$' | tr -d '\r'))

  select CITY in "${CITIES[@]}"; do
    [[ -n $CITY ]] && break
  done
sleep 2
  TIMEZONE="$REGION/$CITY"

  print_center "Выбран часовой пояс: $TIMEZONE"
}

# Функция для выполнения команд в chroot и проверки результата
run_chroot() {
    local CMD="$1"
    run_silent arch-chroot /mnt /bin/bash -c "$CMD"
    if [ $? -ne 0 ]; then
        echo "Ошибка при выполнении: $CMD"
        exit 1
    fi
}

clear
print_center "ARCH LINUX"

# === Выбор диска ===
print_center "=== ВЫБОР ДИСКА ==="

print_center "ДОСТУПНЫЕ ДИСКИ:"

lsblk -d -p -o NAME,SIZE,MODEL | grep -v "ROM\|loop\|sr0"

print_center "Введите полный путь к диску (например, /dev/sda или /dev/nvme0n1)"

read -p "> " DISK

# === Проверка существования диска ===
if [ ! -b "$DISK" ]; then
  error_handler "Диск $DISK не найден"
fi

sleep 4

# === Размонтирование диска, если он смонтирован ===
if mount | grep -q "$DISK"; then
print_center "Диск $DISK смонтирован. Размонтирую его..."

  # Попытка рекурсивного размонтирования
  umount -R /mnt 2>/dev/null

  if [ $? -ne 0 ]; then
print_center "Не удалось размонтировать диск $DISK с помощью umount -R /mnt. Пожалуйста, перезагрузите систему и попробуйте снова."

    exit 1
  fi

sleep 4

print_center "Диск $DISK успешно размонтирован."

fi

print_center "=== ЗАПРОС ИМЕНИ ПОЛЬЗОВАТЕЛЯ, ПАРОЛЯ И ИМЕНИ ВАШЕГО ПК ==="

print_center "Введите имя пользователя:"
read USERNAME

print_center "Введите пароль пользователя:"
read -s USER_PASSWORD
echo ""  # Добавляем перевод строки после ввода пароля

print_center "Введите пароль root:"
read -s ROOT_PASSWORD
echo ""  # Добавляем перевод строки после ввода пароля

print_center "Введите имя вашего пк:"
read HOSTNAME

sleep 2
# === Выбор часового пояса ===
select_timezone
sleep 6
clear

 print_center "Выбор режима разметки диска"
    echo
    print_center "1) Авто (2 раздела: EFI и ROOT)"
    print_center "2) Ручное (разметка утилитой cfdisk: ROOT,EFI,HOME,SWAP)"
    echo

    while true; do
        read -p "Введите ваш выбор (1 или 2): " choice
        case $choice in
            1) auto_partition; break ;;
            2) manual_partition; break ;;
            *) print_center "Неверный выбор, попробуйте снова"; echo ;;
        esac
    done

sleep 4
check_command "pacman -S reflector --noconfirm" "Не удалось установить reflector"
check_command "reflector -c 'Russia,Belarus,Germany' --save /etc/pacman.d/mirrorlist" "Не удалось копирование"
check_command "pacman -Sy" "Не удалось обновление"
sleep 6

# === Установка базовой системы ===
check_command "pacstrap -i /mnt base linux linux-firmware sudo nano networkmanager dhcpcd plasma-desktop sddm sddm-kcm gwenview dolphin kate power-profiles-daemon firefox packagekit-qt5 bluez bluez-utils konsole ark firefox firefox-i18n-ru btrfs-progs ttf-liberation noto-fonts-cjk noto-fonts-emoji intel-ucode amd-ucode  pacman-contrib grub grub-btrfs efibootmgr gst-plugins-bad gst-plugins-ugly gst-plugins-good gst-plugins-base dosfstools mtools unrar --noconfirm" "Не удалось установить базовую систему и KDE Plasma"

sleep 6
# === Генерация fstab ===
check_command "genfstab -U /mnt >> /mnt/etc/fstab" "Не удалось сгенерировать fstab"

sleep 6
# === Chroot-настройка ===

sleep 6
#echo "Настройка часового пояса..."
run_chroot "ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime"

#echo "Установка аппаратных часов..."
run_chroot "hwclock --systohc"

sleep 6
#echo "Раскомментирование строк для русской локали..."
run_chroot "sed -i 's/#ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/g' /etc/locale.gen"
run_chroot "sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen"

#echo "Генерация локалей..."
run_chroot "locale-gen"

#echo "Установка LANG..."
run_chroot "echo LANG=ru_RU.UTF-8 > /etc/locale.conf"

#echo "Установка KEYMAP..."
run_chroot "echo KEYMAP=ru > /etc/vconsole.conf"

#echo "Установка FONT..."
run_chroot "echo 'FONT=cyr-sun16' >> /etc/vconsole.conf"

#echo "Установка имени хоста..."
run_chroot "echo \"$HOSTNAME\" > /etc/hostname"

#echo "Добавление localhost в hosts..."
run_chroot "echo \"127.0.0.1 localhost\" >> /etc/hosts"
run_chroot "echo \"::1       localhost\" >> /etc/hosts"
sleep 6
#echo "Создание initramfs..."
run_chroot "mkinitcpio -P"
sleep 6

#echo "Установка пароля root..."
run_chroot "echo \"root:$ROOT_PASSWORD\" | chpasswd"

#echo "Создание пользователя..."
run_chroot "useradd -m -G wheel -s /bin/bash \"$USERNAME\""

#echo "Установка пароля пользователя..."
run_chroot "echo \"$USERNAME:$USER_PASSWORD\" | chpasswd"

#echo "Настройка sudo..."
run_chroot "echo \"%wheel ALL=(ALL) ALL\" >> /etc/sudoers"
sleep 6

#echo "Включение multilib репозитория..."
run_chroot "sed -i '/^#\[multilib\]/,/^#Include/ s/^#//' /etc/pacman.conf"
#echo "Добавление опций Color и ILoveCandy..."
run_chroot "sed -i 's/#Color/Color/' /etc/pacman.conf"
run_chroot "sed -i '/^Color/a ILoveCandy' /etc/pacman.conf"
run_chroot "pacman -Sy"

sleep 6

if [ -d /sys/firmware/efi/ ]; then
    #echo "Установка GRUB (EFI)..."
    run_chroot "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable /dev/$DISK"
    #echo "Генерация grub.cfg (EFI)..."
    run_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
fi

sleep 6
#echo "Включение NetworkManager..."
run_chroot "systemctl enable NetworkManager"

#echo "Включение SDDM..."
run_chroot "systemctl enable sddm"

sleep 6
# === Выход из chroot ===
#echo "Выход из chroot..."
arch-chroot /mnt /bin/bash -c "exit"

# === Размонтирование ===
#echo "Размонтирование /mnt..."
umount -R /mnt
sleep 2
echo
echo

print_center "СИСТЕМА УСПЕШНО УСТАНОВЛЕНА!!!"

sleep 4
# === Перезагрузка ===
print_center "Перезагрузка..."
#reboot
