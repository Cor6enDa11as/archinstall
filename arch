#!/bin/bash

setfont cyr-sun16 2>/dev/null

FILESYSTEM=""
TIMEZONE=""
USERNAME=""
USER_PASSWORD=""
HOSTNAME=""
DISK=""
BTRFS_OPTIONS="rw,noatime,compress=zstd:2,ssd,space_cache=v2,discard=async"
EXT4_OPTIONS="noatime,discard,defaults"
HOME=""
FILESYSTEM_HOME=""
SWAP=""
HOME_SIZE=""
SWAP_SIZE=""

print_center() {
  local text="$1"
  local term_width=$(tput cols)

  while IFS= read -r line; do

    line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

    padding=$(( (term_width - ${#line}) / 2 ))

    printf "%${padding}s\033[1;36m%s\033[0m\n" "" "$line"
  done <<< "$text"

  echo
  echo
}

show_progress() {
echo""
echo""
  local current=$1
  local total=$2
  local message="$3"

  # Цвета
  local blue=$'\033[1;36m'
  local yellow=$'\033[1;33m'
  local green=$'\033[1;32m'
  local reset=$'\e[0m'
  local gray=$'\e[90m'

  local percentage=$(( (current * 100) / total ))
  local term_width=$(tput cols)
  local max_bar_length=$((term_width - 15))

  [ "$max_bar_length" -lt 1 ] && max_bar_length=1

  local filled_length=$(( (percentage * max_bar_length) / 100 ))
  local bar=""
  for (( i=0; i<filled_length; i++ )); do
    bar+="${blue}#${reset}"
  done
  for (( i=filled_length; i<max_bar_length; i++ )); do
    bar+="${gray}-${reset}"
  done

  if [ "$current" -eq 1 ]; then
    printf "\n\n"
    printf "\033[2A"
  fi

  printf "\r\033[K"
  printf "\033[1A\033[K"

  printf "[%s]\n" "$bar"

  printf "${yellow}%3d%%${reset} ${green}%s${reset}" "$percentage" "$message"

  [ "$current" -eq "$total" ] && echo ""
}
total_steps=13

error_handler() {
  echo -e "\n\033[1;31mОшибка: $1\033[0m"
  exit 1
}

run_silent() {
  "$@" > /dev/null 2>&1
}

check_command() {
  local command="$1"
  local error_message="$2"

  run_silent /bin/bash -c "$command"

  if [ $? -ne 0 ]; then
    error_handler "$error_message"
  fi
}

check_partitions() {
current_step=1
show_progress "$current_step" "$total_steps" "Проверка выбранных разделов..."
sleep 6
    if [[ ! -b "$EFI" ]]; then
    error_handler "Раздел EFI $EFI не найден"
    fi

    if [[ ! -b "$ROOT" ]]; then
     error_handler "Раздел ROOT $ROOT не найден"1
    fi
}

mount_efi() {
if [ -d /sys/firmware/efi/ ]; then
  check_command "mkfs.vfat -F32 $EFI" "Не удалось отформатировать раздел EFI"
  mkdir -p /mnt/boot/efi
  check_command "mount $EFI /mnt/boot/efi" "Не удалось смонтировать раздел EFI"
fi
}

mount_partitions() {
current_step=2
show_progress "$current_step" "$total_steps" "Монтирование выбранных разделов..."
sleep 6

    if [ "$FILESYSTEM" = "btrfs" ]; then
check_command "mkfs.btrfs -f "$ROOT"" "Не удалось отформатировать раздел ROOT"
check_command "mount "$ROOT" /mnt" "Не удалось смонтировать раздел ROOT"

check_command "btrfs subvolume create /mnt/@" "Не удалось создать @"
check_command "btrfs subvolume create /mnt/@snapshots" "Не удалось создать @snapshots"
check_command "btrfs subvolume create /mnt/@var" "Не удалось создать @var"
check_command "btrfs subvolume create /mnt/@log" "Не удалось создать @log"
check_command "btrfs subvolume create /mnt/@cache" "Не удалось создать @cache"

    if [ -z "$HOME" ]; then

check_command "btrfs subvolume create /mnt/@home"
fi

umount /mnt

check_command "mount -o $BTRFS_OPTIONS,subvol=@ "$ROOT" /mnt"  "Не удалось смонтировать подтом @"
        mkdir -p /mnt/{var,.snapshots}

check_command "mount -o $BTRFS_OPTIONS,subvol=@snapshots "$ROOT" /mnt/.snapshots" "Не удалось смонтировать подтом @snapshots"
check_command "mount -o $BTRFS_OPTIONS,subvol=@var "$ROOT" /mnt/var"  "Не удалось смонтировать подтом @var"
mkdir -p /mnt/{var/log,var/cache}
check_command "mount -o $BTRFS_OPTIONS,subvol=@log "$ROOT" /mnt/var/log" "Не удалось смонтировать подтом @log"
check_command "mount -o $BTRFS_OPTIONS,subvol=@cache "$ROOT" /mnt/var/cache" "Не удалось смонтировать подтом @cache"

        if [ -z "$HOME" ]; then
        mkdir -p /mnt/home
  check_command "mount -o $BTRFS_OPTIONS,subvol=@home "$ROOT" /mnt/home"  "Не удалось смонтировать подтом @home"
        fi
    else
check_command "mkfs.ext4 -F "$ROOT"" "Не удалось отформатировать раздел ROOT"
check_command "mount -o $EXT4_OPTIONS "$ROOT" /mnt" "Не удалось смонтировать раздел ROOT"
    fi

    if [ -n "$HOME" ]; then

        mkdir -p /mnt/home

        if [ "$FILESYSTEM_HOME" = "btrfs" ]; then

check_command "mkfs.btrfs -f "$HOME"" "Не удалось отформатировать раздел HOME"
check_command "mount "$HOME" /mnt/home" "Не удалось смонтировать раздел HOME"
            btrfs subvolume create /mnt/home/@home
            umount /mnt/home
check_command "mount -o $BTRFS_OPTIONS,subvol=@home "$HOME" /mnt/home" "Не удалось смонтировать подтом @home"
        else

check_command "mkfs.ext4 -F "$HOME"" "Не удалось отформатировать раздел HOME"
check_command "mount -o $EXT4_OPTIONS "$HOME" /mnt/home" "Не удалось смонтировать раздел HOME"
        fi
    fi

}

filesystem_root() {
echo""
echo""
while true; do
  print_center "ВЫБИРИТЕ ФАЙЛОВУЮ СИСТЕМУ КОРНЕВОГО РАЗДЕЛА (EXT4 или BTRFS):"
  read FILESYSTEM
  case $FILESYSTEM in
    ext4|btrfs)
    declare -g FILESYSTEM
      break
      ;;
    *)
      print_center "Неверный выбор. Пожалуйста, выберите ext4 или btrfs."
      ;;
  esac
done
}

manual_partition() {
clear
echo""
echo""
print_center "=== РУЧНАЯ РАЗМЕТКА ==="

print_center "ВВЕДИТЕ РАЗМЕР ЗАГРУЗОЧНОГО РАЗДЕЛА (EFI - рекомендуется 300М-512M, обязательно):"
while true; do
    read -p " > " EFI_SIZE
    [[ -n "$EFI_SIZE" ]] && break
    print_center "Поле обязательно к заполнению!"
done

print_center "ВВЕДИТЕ РАЗМЕР КОРНЕВОГО РАЗДЕЛА (ROOT - рекомендуется >= 20G, обязательно):"
while true; do
    read -p " > " ROOT_SIZE
    [[ -n "$ROOT_SIZE" ]] && break
    print_center "Поле обязательно к заполнению!"
done

print_center "ВВЕДИТЕ РАЗМЕР ДОМАШНЕГО РАЗДЕЛА (HOME - на ваше усмотрение , нажмите Enter чтобы пропустить):"
read -p " > " HOME_SIZE
if [[ -n "$HOME_SIZE" ]]; then
    CREATE_HOME="y"
else
    CREATE_HOME="n"
fi

print_center "ВВЕДИТЕ РАЗМЕР РАЗДЕЛА ПОДКАЧКИ (SWAP - рекомендуется в размере обьёма опер.памяти , нажмите  Enter чтобы пропустить):"
read -p " > " SWAP_SIZE
if [[ -n "$SWAP_SIZE" ]]; then
    CREATE_SWAP="y"
else
    CREATE_SWAP="n"
fi
clear
sleep 4

{
    echo "label: gpt"
    echo "size=$EFI_SIZE, type=uefi, name=EFI, bootable"
    echo "size=$ROOT_SIZE, type=linux-filesystem, name=ROOT"
    [[ "$CREATE_HOME" == "y" ]] && echo "size=$HOME_SIZE, type=linux-filesystem, name=HOME"
    [[ "$CREATE_SWAP" == "y" ]] && echo "size=$SWAP_SIZE, type=linux-swap, name=SWAP"
} | sfdisk "$DISK" > /dev/null 2>&1


if [[ $DISK =~ "nvme" ]]; then
    EFI="${DISK}p1"
    ROOT="${DISK}p2"
else
    EFI="${DISK}1"
    ROOT="${DISK}2"
fi

if [[ -n "$HOME_SIZE" ]]; then

    if [[ $DISK =~ "nvme" ]]; then
        HOME="${DISK}p3"
    else
        HOME="${DISK}3"
    fi

    if [[ -n "$SWAP_SIZE" ]]; then
        if [[ $DISK =~ "nvme" ]]; then
            SWAP="${DISK}p4"
        else
            SWAP="${DISK}4"
        fi
    else
        SWAP=""
    fi

else

    HOME=""
    if [[ -n "$SWAP_SIZE" ]]; then
        if [[ $DISK =~ "nvme" ]]; then
            SWAP="${DISK}p3"
        else
            SWAP="${DISK}3"
        fi
    else
        SWAP=""
    fi
fi


filesystem_root
clear
if [ -n "$HOME" ]; then
echo""
echo""

while true; do
  print_center "ВЫБИРИТЕ ФАЙЛОВУЮ СИСТЕМУ ДОМАШНЕГО РАЗДЕЛА (EXT4 или BTRFS):"
  read FILESYSTEM_HOME
  case $FILESYSTEM_HOME in
    ext4|btrfs)
      break
      ;;
    *)
      print_center "Неверный выбор. Пожалуйста, выберите ext4 или btrfs."
      ;;
  esac
done
fi
clear

check_partitions
mount_partitions
mount_efi

if [ -n "$SWAP" ]; then
check_command "mkswap "$SWAP"" "Не удалось создать подкачку в разделе $SWAP"
check_command "swapon "$SWAP"" "Не удалось запустить подкачку в разделе $SWAP"
fi
}

auto_partition() {
clear
filesystem_root
clear
sleep 4

echo "label: gpt
size=512M, type=uefi, name=EFI, bootable
type=linux-filesystem, name=ROOT" | sfdisk "$DISK" > /dev/null 2>&1

if [[ $DISK =~ "nvme" ]]; then
    EFI="${DISK}p1"
    ROOT="${DISK}p2"
else
    EFI="${DISK}1"
    ROOT="${DISK}2"
fi

check_partitions
mount_partitions
mount_efi
}

select_timezone() {
echo""
echo""
  print_center "=== ВЫБОР ЧАСОВОГО ПОЯСА ==="
echo""
  print_center "Выберите регион:"
echo""
  PS3="> "

  REGIONS=($(timedatectl list-timezones | awk -F'/' '{print $1}' | sort -u | grep -v '^$' | tr -d '\r'))

  select REGION in "${REGIONS[@]}"; do
    [[ -n $REGION ]] && break
  done

  print_center "Выберите город:"
echo""

  CITIES=($(timedatectl list-timezones | grep "^$REGION/" | awk -F'/' '{print $2}' | sort -u | grep -v '^$' | tr -d '\r'))

  select CITY in "${CITIES[@]}"; do
    [[ -n $CITY ]] && break
  done
sleep 2
  TIMEZONE="$REGION/$CITY"
echo""
  print_center "Выбран часовой пояс: $TIMEZONE"
}

run_chroot() {
    local CMD="$1"
    run_silent arch-chroot /mnt /bin/bash -c "$CMD"
    if [ $? -ne 0 ]; then
        echo "Ошибка при выполнении: $CMD"
        exit 1
    fi
}


clear
echo""
echo""
print_center "ARCH LINUX"

echo""
echo""
print_center "=== ЗАПРОС ИМЕНИ ПОЛЬЗОВАТЕЛЯ, ПАРОЛЯ И ИМЕНИ ВАШЕГО ПК ==="

print_center "Введите имя пользователя (латиница):"
read -p "> " USERNAME

print_center "Введите пароль пользователя:"
read -s  USER_PASSWORD
echo""

print_center "Введите пароль root:"
read -s  ROOT_PASSWORD
echo""

print_center "Введите имя вашего пк (латиница):"
read -p "> " HOSTNAME
clear

echo""
echo""

print_center "=== ВЫБОР ДИСКА ==="
echo""
print_center "=== ВНИМАНИЕ!!! ВЫБРАННЫЙ ДИСК БУДЕТ ОТФОРМАТИРОВАН!!!ВСЕ РАЗДЕЛЫ БУДУТ УДАЛЕНЫ!!! ==="
echo""
print_center "Доступные диски:"

lsblk -d -p -o NAME,SIZE,MODEL | grep -v "ROM\|loop\|sr0"

print_center "ВВЕДИТЕ ПОЛНЫЙ ПУТЬ К ДИСКУ (например, /dev/sda или /dev/nvme0n1)"

read -p "> " DISK

if [ ! -b "$DISK" ]; then
  error_handler "Диск $DISK не найден"
fi

sleep 4

if mount | grep -q "$DISK"; then
print_center "Диск $DISK смонтирован. Размонтирую его..."

  umount -R /mnt 2>/dev/null

  if [ $? -ne 0 ]; then
print_center "Не удалось размонтировать диск $DISK с помощью umount -R /mnt. Пожалуйста, перезагрузите систему и попробуйте снова."

    exit 1
  fi

print_center "Диск $DISK успешно размонтирован."
sleep 4
fi
clear
echo""
echo""
print_center "УДАЛЕНИЕ РАЗДЕЛОВ на $DISK "
check_command "swapoff -a" "Не удалось выключить свап"

check_command "wipefs -a "$DISK"" "Не удалось удалить подписи фс"

check_command "sgdisk -Z "$DISK"" "Не удалось удалить таблицу разделов"

check_command "partprobe "$DISK"" "Не удалось синхронизировать диск"
print_center "Диск $DISK успешно очищен"
sleep 4
clear

sleep 2

select_timezone
sleep 4
clear
echo""
echo""
 print_center "=== ВЫБОР РЕЖИМА РАЗМЕТКИ ДИСКА ==="
    echo""
    print_center "1) АВТО ( для ленивых :-) 2 раздела: EFI и ROOT)"
    print_center "2) РУЧНАЯ (на ваше усмотрение)"
    echo""

    while true; do
        read -p "Введите ваш выбор (1 или 2): " choice
        case $choice in
            1) auto_partition; break ;;
            2) manual_partition; break ;;
            *) print_center "Неверный выбор, попробуйте снова"; echo ;;
        esac
    done
clear

current_step=3
show_progress "$current_step" "$total_steps" "Установка и обновление зеркал..."
sleep 6

if ! ping -c 1 archlinux.org &> /dev/null; then
  error_handler "Ошибка: Нет интернета!"
fi
check_command "pacman -Sy --noconfirm pacman-contrib" "Не удалось установить pacman-contrib"
curl -s "https://archlinux.org/mirrorlist/?country=RU&country=BY" | sed 's/^#Server/Server/' | rankmirrors -n 25 - > /etc/pacman.d/mirrorlist
check_command "pacman -Syy --noconfirm" "Не удалось обновление"
sleep 4

current_step=4
show_progress "$current_step" "$total_steps" "Установка системы, рабочего стола и необходимых утилит..."

check_command "pacstrap -i /mnt base linux linux-firmware sudo nano networkmanager dhcpcd plasma-desktop sddm sddm-kcm gwenview dolphin kate power-profiles-daemon firefox packagekit-qt5 bluez bluez-utils konsole ark firefox firefox-i18n-ru btrfs-progs ttf-liberation noto-fonts-cjk noto-fonts-emoji intel-ucode amd-ucode  pacman-contrib grub grub-btrfs efibootmgr gst-plugins-bad gst-plugins-ugly gst-plugins-good gst-plugins-base dosfstools mtools unrar --noconfirm" "Не удалось установить базовую систему и KDE Plasma"

sleep 3
current_step=5
show_progress "$current_step" "$total_steps" "Генерация fstab..."
sleep 6

check_command "genfstab -U /mnt >> /mnt/etc/fstab" "Не удалось сгенерировать fstab"

sleep 3
current_step=6
show_progress "$current_step" "$total_steps" "Настройка времени..."
sleep 6

run_chroot "ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime"

run_chroot "hwclock --systohc"

sleep 3
current_step=7
show_progress "$current_step" "$total_steps" "Локализация системы..."
sleep 6

run_chroot "sed -i 's/#ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/g' /etc/locale.gen"
run_chroot "sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen"
run_chroot "locale-gen"
run_chroot "echo LANG=ru_RU.UTF-8 > /etc/locale.conf"
run_chroot "echo KEYMAP=ru > /etc/vconsole.conf"
run_chroot "echo 'FONT=cyr-sun16' >> /etc/vconsole.conf"
sleep 3
current_step=8
show_progress "$current_step" "$total_steps" "Настройка пользователя..."
sleep 6

run_chroot "echo \"$HOSTNAME\" > /etc/hostname"
run_chroot "echo \"127.0.0.1 localhost\" >> /etc/hosts"
run_chroot "echo \"::1       localhost\" >> /etc/hosts"
run_chroot "echo \"root:$ROOT_PASSWORD\" | chpasswd"
run_chroot "useradd -m -G wheel -s /bin/bash \"$USERNAME\""
run_chroot "echo \"$USERNAME:$USER_PASSWORD\" | chpasswd"
run_chroot "echo \"%wheel ALL=(ALL) ALL\" >> /etc/sudoers"
sleep 3
current_step=9
show_progress "$current_step" "$total_steps" "Создание начального образа системы..."
sleep 6

run_chroot "mkinitcpio -P"
sleep 3
current_step=10
show_progress "$current_step" "$total_steps" "Настройка пакетного менеджера..."
sleep 6

run_chroot "sed -i '/^#\[multilib\]/,/^#Include/ s/^#//' /etc/pacman.conf"
run_chroot "sed -i 's/#Color/Color/' /etc/pacman.conf"
run_chroot "sed -i '/^Color/a ILoveCandy' /etc/pacman.conf"
run_chroot "pacman -Sy"

sleep 3
current_step=11
show_progress "$current_step" "$total_steps" "Установка загрузчика..."
sleep 6

if [ -d /sys/firmware/efi/ ]; then
    #echo "Установка GRUB (EFI)..."
    run_chroot "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable /dev/$DISK"
    #echo "Генерация grub.cfg (EFI)..."
    run_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
fi

sleep 3
current_step=12
show_progress "$current_step" "$total_steps" "Включение необходимых служб..."
sleep 6

run_chroot "systemctl enable NetworkManager"
run_chroot "systemctl enable sddm"

sleep 3
current_step=13
show_progress "$current_step" "$total_steps" "Завершение установки..."
sleep 6

arch-chroot /mnt /bin/bash -c "exit"

umount -R /mnt
sleep 2
echo""
echo""

print_center "СИСТЕМА УСПЕШНО УСТАНОВЛЕНА!!!"
sleep 4
print_center "Перезагрузка..."
sleep 4
reboot
